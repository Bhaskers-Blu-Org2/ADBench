#  C:\dev\GitHub\autodiff\GMM.jl
#  AUTOGENERATED FROM C:\dev\GitHub\autodiff\GMM.ipynb on 2015-07-06T08:00:31
using Base.Test
using IPynbToJl
ipynb_to_jl("GMM.ipynb")
ipynb_to_jl("logsumexp.ipynb")
ipynb_to_jl("LowerTriangular.ipynb")

@printf("julia version = %s, dir %s\n", Base.VERSION_STRING, pwd())
include("MatVec.jl")
include("LowerTriangular.jl")
# Conventional GMM.
# This doesn't even use inverse covariance, because as soon as you
# start down that route, you may as well go for lpGMM below.
type GMM
  n::Int           # number of Gaussians
  d::Int           # dimension of Gaussian
  alphas::Vec      # weights: n, require sum(alphas)==1
  mus::Array{Vec}  # means: n, each dx1
  sigmas::Array{SymMat}  # covariances: n, each dxd symmetric positive definite
end

function log_likelihood(g::GMM, x::Vec)
  total = 0
  for k=1:g.n
    mean = g.mus[k]
    weight =  g.alphas[k]
    Σ = g.sigmas[k]
    mahalanobis = dot(mean - x, inv(Σ) * (mean - x))
    total += weight / sqrt(det(2pi*full(Σ))) * exp(-0.5*mahalanobis)
  end
  log(total)
end
# Test it a bit

n=3
d=2
alphas=rand(n); alphas /= sum(alphas);
mus=[randn(d) for k=1:n]
sigmas=[AAt(randn(d,d)) for k=1:n]
test_gmm = GMM(n,d,alphas,mus,sigmas)
@printf("An example gmm = %s\n", test_gmm)

x = randn(d) # Test point

ll0 = log_likelihood(test_gmm, x)
@printf("Tes log likelihood ll0=%f\n", ll0)

#[markdown]
# ---------

# 

# Log-parameterized GMM

# =====================

# 

# This is a GMM parameterized by log-weights, and the Cholesky factor of the inverse covariance.  This means we can do unconstrained optimization, and in fact makes for a more efficient computation of the normalization constant, as well as more numerical stability all round.    

include("LowerTriangular.jl")  # get ltri_pack and ltri_unpack
##########################################################################
# Log-parametrized GMM.
# Weights are strictly positive, covariances are parameterized by their inverse
# square roots (lower triangular).
type lpGMM
  n::Int           # number of Gaussians
  d::Int           # dimension of Gaussian
  alphas::Vec      # log weights: n
  mus::Array{Vec}  # means: n, each dx1
  LDs::Array{Vec}  # square-root-inverse-covariances, log(diagonal): n, each d x 1
  LTs::Array{Vec}  # square-root-inverse-covariances, lower triangle: n, each d*(d-1)/2 x 1
end

# Convert simple GMM to lpGMM
function lpGMM(g::GMM)
  LTs = Array{Vec}(g.n)
  LDs = Array{Vec}(g.n)
  for k=1:g.n
    L = inv(chol(g.sigmas[k].data, Val{:L}))
    D, T = ltri_pack(L)
    LDs[k], LTs[k] = vec(log(D)), vec(T)
  end
  lpGMM(g.n,g.d,log(g.alphas),g.mus,LDs,LTs)
end

# Convert log-parameterized-GMM to simple GMM UnivariateGMM
function GMM(l::lpGMM)
  alphas::Vec = exp(l.alphas)/sum(exp(l.alphas))
  mus::Array{Vec} = l.mus
  Ls = [ltri_unpack(exp(l.LDs[i]), l.LTs[i]) for i=1:l.n]
  sigmas::Array{SymMat} = map(A->inv(Symmetric(A'*A)), Ls)
  GMM(l.n,l.d,alphas,mus,sigmas)
end

g = lpGMM(test_gmm)

#@printf("gmm=%s\n**\n", GMM(g))
#[markdown]
# lpGMM log-likelihood

# --------------------

const halflog2π = log(2π)/2

# Compute log-likelihood
# This version is easy to read, but we can do better (see below)
function log_likelihood_reference(g::lpGMM, x::Vec)
  total = 0
  weights = exp(g.alphas)
  weights /= sum(weights) 
  for k=1:g.n
    L_diagonal = exp(g.LDs[k])
    L_ltri_entries = g.LTs[k] 
    InvLowerTriangle = ltri_unpack(L_diagonal, L_ltri_entries)
    mean = g.mus[k]
    mahalanobis = sumsq(InvLowerTriangle * (mean - x))
    total += weights[k] * det(InvLowerTriangle) * exp(-0.5*mahalanobis)
  end
  log(total) - halflog2π*g.d
end

ll1 = log_likelihood_reference(g, x)
@printf("ll0=%f, ll1=%f, ratio to true=%f\n", ll0, ll1, ll0/ll1)
@test_approx_eq_eps ll0 ll1 1e-12

include("logsumexp.jl")

# Cleanest log_likelihood implementation
function log_likelihood(g::lpGMM, x::Vec)
    # function to combine log-diagonal an lower triangle
    get_L(L_log_diagonal, L_ltri_entries) = ltri_unpack(exp(L_log_diagonal), L_ltri_entries)

    # mahalanobis distances squared
    d_mahals = [0.5*sumsq(get_L(g.LDs[i], g.LTs[i])*(g.mus[i] - x)) for i in 1:g.n]
    
    # log determinants
    log_determinants = [sum(g.LDs[i]) for i in 1:g.n]
    
    logsumexp(g.alphas + log_determinants - d_mahals) - logsumexp(g.alphas) - halflog2π*g.d
end

ll2 = log_likelihood(g, x)
@printf("ll0=%f, ll2=%f, ratio to true=%f\n", ll0, ll2, ll0/ll2)
@test_approx_eq_eps ll0 ll2 1e-12


