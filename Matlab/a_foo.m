% Generated by ADiMat 0.6.0-4975
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2015 Johannes Willkomm <johannes@johannes-willkomm.de>
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to adimat-users@lists.sc.informatik.tu-darmstadt.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Parameters:
%  - dependents=y
%  - independents=mu
%  - inputEncoding=ISO-8859-1
%
% Functions in this file: a_foo, rec_foo,
%  ret_foo
%

function [a_mu nr_y] = a_foo(mu, x, Q, a_y)
   tmpca4 = x - mu;
   tmpca3 = Q * tmpca4;
   tmpca2 = tmpca3 .^ 2;
   tmpca1 = sum(tmpca2);
   y = -0.5 * tmpca1;
   nr_y = y;
   [a_tmpca1 a_tmpca2 a_tmpca3 a_tmpca4 a_mu] = a_zeros(tmpca1, tmpca2, tmpca3, tmpca4, mu);
   if nargin < 4
      a_y = a_zeros1(y);
   end
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultr(tmpca1, -0.5, a_y));
   a_tmpca2 = adimat_adjsum(a_tmpca2, a_sum(a_tmpca1, tmpca2));
   a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, 2 .* tmpca3.^1 .* a_tmpca2));
   a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjmultr(tmpca4, Q, a_tmpca3));
   a_mu = adimat_adjsum(a_mu, adimat_adjred(mu, -a_tmpca4));
end

function y = rec_foo(mu, x, Q)
   tmpca4 = x - mu;
   tmpca3 = Q * tmpca4;
   tmpca2 = tmpca3 .^ 2;
   tmpca1 = sum(tmpca2);
   y = -0.5 * tmpca1;
   adimat_push(tmpca1, tmpca2, tmpca3, tmpca4, y, mu);
   if nargin > 1
      adimat_push1(x);
   end
   if nargin > 2
      adimat_push1(Q);
   end
   adimat_push1(nargin);
end

function a_mu = ret_foo(a_y)
   tmpnargin = adimat_pop1;
   if tmpnargin > 2
      Q = adimat_pop1;
   end
   if tmpnargin > 1
      x = adimat_pop1;
   end
   [mu y tmpca4 tmpca3 tmpca2 tmpca1] = adimat_pop;
   [a_tmpca1 a_tmpca2 a_tmpca3 a_tmpca4 a_mu] = a_zeros(tmpca1, tmpca2, tmpca3, tmpca4, mu);
   if nargin < 1
      a_y = a_zeros1(y);
   end
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultr(tmpca1, -0.5, a_y));
   a_tmpca2 = adimat_adjsum(a_tmpca2, a_sum(a_tmpca1, tmpca2));
   a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, 2 .* tmpca3.^1 .* a_tmpca2));
   a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjmultr(tmpca4, Q, a_tmpca3));
   a_mu = adimat_adjsum(a_mu, adimat_adjred(mu, -a_tmpca4));
end
