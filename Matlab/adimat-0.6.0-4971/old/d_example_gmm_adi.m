% Generated by ADiMat 0.6.0-4728
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2013 Johannes Willkomm <johannes.willkomm@sc.tu-darmstadt.de>
% RWTH Aachen University, 52056 Aachen, Germany
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to adimat-users@lists.sc.informatik.tu-darmstadt.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Flags: FORWARDMODE,  NOOPEROPTIM,
%   NOLOCALCSE,  NOGLOBALCSE,  NOPRESCALARFOLDING,
%   NOPOSTSCALARFOLDING,  NOCONSTFOLDMULT0,  FUNCMODE,
%   NOTMPCLEAR,  DUMP_XML,  UNBOUND_XML,
%   DEPENDENCIES_XML,  PARSE_ONLY,  UNBOUND_ERROR,
%   FUNCTION_LIST_XML
%
% Parameters:
%  - dependents=nll
%  - independents=alphas, mus, Ls
%  - inputEncoding=ISO-8859-1
%  - output-mode: plain
%  - output-file: outputs/d_example_gmm_adi.m
%  - output-file-prefix: 
%  - output-directory: outputs
%
% Functions in this file: d_example_gmm_adi
%

function [d_nll nll] = d_example_gmm_adi(d_alphas, alphas, d_mus, mus, d_Ls, Ls, x)
   L0 = [];
   d_L0 = d_zeros(L0);
   tmpca4 = [];
   d_tmpca4 = d_zeros(tmpca4);
   tmpca3 = [];
   d_tmpca3 = d_zeros(tmpca3);
   tmpca2 = [];
   d_tmpca2 = d_zeros(tmpca2);
   tmpca1 = [];
   d_tmpca1 = d_zeros(tmpca1);
   L = [];
   d_L = d_zeros(L);
   mahal = [];
   d_mahal = d_zeros(mahal);
   K = length(alphas);
   lse = zeros(K, 1, 'like', alphas);
   d_lse = d_zeros(lse);
   for k=1 : K
      d_L0 = adimat_opdiff_subsref(d_Ls, struct('type', '()', 'subs', {{':' ':' k}}));
      L0 = Ls(:, :, k);
      [d_tmpca4 tmpca4] = adimat_diff_diag(d_L0, L0);
      [d_tmpca3 tmpca3] = adimat_diff_exp(d_tmpca4, tmpca4);
      [d_tmpca2 tmpca2] = adimat_diff_diag(d_tmpca3, tmpca3);
      [d_tmpca1 tmpca1] = adimat_diff_tril(d_L0, L0, -1);
      d_L = adimat_opdiff_sum(d_tmpca1, d_tmpca2);
      L = tmpca1 + tmpca2;
      d_tmpca1 = adimat_opdiff_sum(adimat_opdiff_subsref(d_mus, struct('type', '()', 'subs', {{':' k}})), d_zeros(-x));
      tmpca1 = mus(:, k) - x;
      d_mahal = adimat_opdiff_mult(d_L, L, d_tmpca1, tmpca1);
      mahal = L * tmpca1;
      d_tmpca4 = adimat_opdiff_mult(adimat_opdiff_trans(d_mahal, mahal), mahal', d_mahal, mahal);
      tmpca4 = mahal' * mahal;
      d_tmpca3 = adimat_opdiff_mult_left(0.5, d_tmpca4, tmpca4);
      tmpca3 = 0.5 * tmpca4;
      [d_tmpca2 tmpca2] = adimat_diff_diag(d_L0, L0);
      d_tmpca1 = adimat_diff_sum1(d_tmpca2, tmpca2);
      tmpca1 = sum(tmpca2);
      d_lse = adimat_opdiff_subsasgn(d_lse, struct('type', {'()'}, 'subs', {{k}}), adimat_opdiff_sum(adimat_opdiff_subsref(d_alphas, struct('type', '()', 'subs', {{k}})), d_tmpca1, -d_tmpca3));
      lse(k) = alphas(k) + tmpca1 - tmpca3;
   end
   [d_tmpca6 tmpca6] = adimat_diff_exp(d_alphas, alphas);
   d_tmpca5 = adimat_diff_sum1(d_tmpca6, tmpca6);
   tmpca5 = sum(tmpca6);
   [d_tmpca4 tmpca4] = adimat_diff_log(d_tmpca5, tmpca5);
   [d_tmpca3 tmpca3] = adimat_diff_exp(d_lse, lse);
   d_tmpca2 = adimat_diff_sum1(d_tmpca3, tmpca3);
   tmpca2 = sum(tmpca3);
   [d_tmpca1 tmpca1] = adimat_diff_log(d_tmpca2, tmpca2);
   d_nll = adimat_opdiff_sum(d_tmpca1, -d_tmpca4);
   nll = tmpca1 - tmpca4;
end
