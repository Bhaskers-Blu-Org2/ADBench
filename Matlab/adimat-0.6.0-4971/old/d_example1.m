% Generated by ADiMat 0.6.0-4728
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2013 Johannes Willkomm <johannes.willkomm@sc.tu-darmstadt.de>
% RWTH Aachen University, 52056 Aachen, Germany
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to adimat-users@lists.sc.informatik.tu-darmstadt.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Flags: FORWARDMODE,  NOOPEROPTIM,
%   NOLOCALCSE,  NOGLOBALCSE,  NOPRESCALARFOLDING,
%   NOPOSTSCALARFOLDING,  NOCONSTFOLDMULT0,  FUNCMODE,
%   NOTMPCLEAR,  DUMP_XML,  UNBOUND_XML,
%   DEPENDENCIES_XML,  PARSE_ONLY,  UNBOUND_ERROR,
%   FUNCTION_LIST_XML
%
% Parameters:
%  - dependents=r
%  - independents=x, c
%  - inputEncoding=ISO-8859-1
%  - output-mode: plain
%  - output-file: outputs/d_example1.m
%  - output-file-prefix: 
%  - output-directory: outputs
%
% Functions in this file: d_example1
%

function [d_r r] = d_example1(d_x, x, d_c, c)
   tmpca1 = [];
   d_tmpca1 = d_zeros(tmpca1);
   r = 0;
   d_r = d_zeros(r);
   powerOfX = 1;
   d_powerOfX = d_zeros(powerOfX);
   for i=1 : length(c)
      d_tmpca1 = adimat_opdiff_mult(adimat_opdiff_subsref(d_c, struct('type', '()', 'subs', {{i}})), c(i), d_powerOfX, powerOfX);
      tmpca1 = c(i) * powerOfX;
      d_r = adimat_opdiff_sum(d_r, d_tmpca1);
      r = r + tmpca1;
      d_powerOfX = adimat_opdiff_mult(d_powerOfX, powerOfX, d_x, x);
      powerOfX = powerOfX * x;
   end
end
