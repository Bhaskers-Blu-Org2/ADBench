% Generated by ADiMat 0.6.0-4728
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2013 Johannes Willkomm <johannes.willkomm@sc.tu-darmstadt.de>
% RWTH Aachen University, 52056 Aachen, Germany
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to adimat-users@lists.sc.informatik.tu-darmstadt.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Flags: BACKWARDMODE,  NOOPEROPTIM,
%   NOLOCALCSE,  NOGLOBALCSE,  NOPRESCALARFOLDING,
%   NOPOSTSCALARFOLDING,  NOCONSTFOLDMULT0,  FUNCMODE,
%   NOTMPCLEAR,  DUMP_XML,  UNBOUND_XML,
%   DEPENDENCIES_XML,  PARSE_ONLY,  UNBOUND_ERROR,
%   FUNCTION_LIST_XML
%
% Parameters:
%  - dependents=r
%  - independents=x, c
%  - inputEncoding=ISO-8859-1
%  - output-mode: plain
%  - output-file: outputs/a_example1.m
%  - output-file-prefix: 
%  - output-directory: outputs
%
% Functions in this file: a_example1, rec_example1,
%  ret_example1
%

function [a_x a_c nr_r] = a_example1(x, c, a_r)
   tmpca1 = 0;
   r = 0;
   powerOfX = 1;
   tmpfra1_2 = length(c);
   for i=1 : tmpfra1_2
      adimat_push1(tmpca1);
      tmpca1 = c(i) * powerOfX;
      adimat_push1(r);
      r = r + tmpca1;
      adimat_push1(powerOfX);
      powerOfX = powerOfX * x;
   end
   adimat_push1(tmpfra1_2);
   nr_r = r;
   [a_powerOfX a_tmpca1 a_x a_c] = a_zeros(powerOfX, tmpca1, x, c);
   if nargin < 3
      a_r = a_zeros1(r);
   end
   tmpfra1_2 = adimat_pop1;
   for i=fliplr(1 : tmpfra1_2)
      powerOfX = adimat_pop1;
      a_x = adimat_adjsum(a_x, adimat_adjmultr(x, powerOfX, a_powerOfX));
      tmpsa1 = a_powerOfX;
      a_powerOfX = a_zeros1(powerOfX);
      a_powerOfX = adimat_adjsum(a_powerOfX, adimat_adjmultl(powerOfX, tmpsa1, x));
      r = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_r));
      tmpsa1 = a_r;
      a_r = a_zeros1(r);
      a_r = adimat_adjsum(a_r, adimat_adjred(r, tmpsa1));
      tmpca1 = adimat_pop1;
      a_c(i) = adimat_adjsum(a_c(i), adimat_adjmultl(c(i), a_tmpca1, powerOfX));
      a_powerOfX = adimat_adjsum(a_powerOfX, adimat_adjmultr(powerOfX, c(i), a_tmpca1));
      a_tmpca1 = a_zeros1(tmpca1);
   end
end

function r = rec_example1(x, c)
   tmpca1 = 0;
   r = 0;
   powerOfX = 1;
   tmpfra1_2 = length(c);
   for i=1 : tmpfra1_2
      adimat_push1(tmpca1);
      tmpca1 = c(i) * powerOfX;
      adimat_push1(r);
      r = r + tmpca1;
      adimat_push1(powerOfX);
      powerOfX = powerOfX * x;
   end
   adimat_push(tmpfra1_2, powerOfX, tmpca1, r, x, c);
end

function [a_x a_c] = ret_example1(a_r)
   [c x r tmpca1 powerOfX] = adimat_pop;
   [a_powerOfX a_tmpca1 a_x a_c] = a_zeros(powerOfX, tmpca1, x, c);
   if nargin < 1
      a_r = a_zeros1(r);
   end
   tmpfra1_2 = adimat_pop1;
   for i=fliplr(1 : tmpfra1_2)
      powerOfX = adimat_pop1;
      a_x = adimat_adjsum(a_x, adimat_adjmultr(x, powerOfX, a_powerOfX));
      tmpsa1 = a_powerOfX;
      a_powerOfX = a_zeros1(powerOfX);
      a_powerOfX = adimat_adjsum(a_powerOfX, adimat_adjmultl(powerOfX, tmpsa1, x));
      r = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_r));
      tmpsa1 = a_r;
      a_r = a_zeros1(r);
      a_r = adimat_adjsum(a_r, adimat_adjred(r, tmpsa1));
      tmpca1 = adimat_pop1;
      a_c(i) = adimat_adjsum(a_c(i), adimat_adjmultl(c(i), a_tmpca1, powerOfX));
      a_powerOfX = adimat_adjsum(a_powerOfX, adimat_adjmultr(powerOfX, c(i), a_tmpca1));
      a_tmpca1 = a_zeros1(tmpca1);
   end
end
