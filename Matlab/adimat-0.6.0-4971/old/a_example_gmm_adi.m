% Generated by ADiMat 0.6.0-4728
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2013 Johannes Willkomm <johannes.willkomm@sc.tu-darmstadt.de>
% RWTH Aachen University, 52056 Aachen, Germany
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to adimat-users@lists.sc.informatik.tu-darmstadt.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Flags: BACKWARDMODE,  NOOPEROPTIM,
%   NOLOCALCSE,  NOGLOBALCSE,  NOPRESCALARFOLDING,
%   NOPOSTSCALARFOLDING,  NOCONSTFOLDMULT0,  FUNCMODE,
%   NOTMPCLEAR,  DUMP_XML,  UNBOUND_XML,
%   DEPENDENCIES_XML,  PARSE_ONLY,  UNBOUND_ERROR,
%   FUNCTION_LIST_XML
%
% Parameters:
%  - dependents=nll
%  - independents=alphas, mus, Ls
%  - inputEncoding=ISO-8859-1
%  - output-mode: plain
%  - output-file: outputs/a_example_gmm_adi.m
%  - output-file-prefix: 
%  - output-directory: outputs
%
% Functions in this file: a_example_gmm_adi, rec_example_gmm_adi,
%  ret_example_gmm_adi
%

function [a_alphas a_mus a_Ls nr_nll] = a_example_gmm_adi(alphas, mus, Ls, x, a_nll)
   tmpca4 = 0;
   tmpca3 = 0;
   tmpca2 = 0;
   tmpca1 = 0;
   tmplia1 = 0;
   L0 = 0;
   L = 0;
   mahal = 0;
   K = length(alphas);
   lse = zeros(K, 1, 'like', alphas);
   tmpfra1_2 = K;
   for k=1 : tmpfra1_2
      adimat_push1(L0);
      L0 = Ls(:, :, k);
      adimat_push1(tmpca4);
      tmpca4 = diag(L0);
      adimat_push1(tmpca3);
      tmpca3 = exp(tmpca4);
      adimat_push1(tmpca2);
      tmpca2 = diag(tmpca3);
      adimat_push1(tmpca1);
      tmpca1 = tril(L0, -1);
      adimat_push1(L);
      L = tmpca1 + tmpca2;
      adimat_push1(tmpca1);
      tmpca1 = mus(:, k) - x;
      adimat_push1(mahal);
      mahal = L * tmpca1;
      adimat_push1(tmpca4);
      tmpca4 = mahal' * mahal;
      adimat_push1(tmpca3);
      tmpca3 = 0.5 * tmpca4;
      adimat_push1(tmpca2);
      tmpca2 = diag(L0);
      adimat_push1(tmpca1);
      tmpca1 = sum(tmpca2);
      adimat_push1(tmplia1);
      tmplia1 = alphas(k) + tmpca1 - tmpca3;
      adimat_push_index1(lse, k);
      lse(k) = tmplia1;
   end
   adimat_push1(tmpfra1_2);
   tmpca6 = exp(alphas);
   tmpca5 = sum(tmpca6);
   adimat_push1(tmpca4);
   tmpca4 = log(tmpca5);
   adimat_push1(tmpca3);
   tmpca3 = exp(lse);
   adimat_push1(tmpca2);
   tmpca2 = sum(tmpca3);
   adimat_push1(tmpca1);
   tmpca1 = log(tmpca2);
   nll = tmpca1 - tmpca4;
   nr_nll = nll;
   [a_L0 a_L a_mahal a_lse a_tmpca4 a_tmpca3 a_tmpca2 a_tmpca1 a_tmplia1 a_tmpca6 a_tmpca5 a_alphas a_mus a_Ls] = a_zeros(L0, L, mahal, lse, tmpca4, tmpca3, tmpca2, tmpca1, tmplia1, tmpca6, tmpca5, alphas, mus, Ls);
   if nargin < 5
      a_nll = a_zeros1(nll);
   end
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_nll));
   a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjred(tmpca4, -a_nll));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, a_tmpca1 ./ tmpca2);
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, a_sum(a_tmpca2, tmpca3));
   a_tmpca2 = a_zeros1(tmpca2);
   tmpca3 = adimat_pop1;
   a_lse = adimat_adjsum(a_lse, exp(lse) .* a_tmpca3);
   a_tmpca3 = a_zeros1(tmpca3);
   tmpca4 = adimat_pop1;
   a_tmpca5 = adimat_adjsum(a_tmpca5, a_tmpca4 ./ tmpca5);
   a_tmpca4 = a_zeros1(tmpca4);
   a_tmpca6 = adimat_adjsum(a_tmpca6, a_sum(a_tmpca5, tmpca6));
   a_alphas = adimat_adjsum(a_alphas, exp(alphas) .* a_tmpca6);
   tmpfra1_2 = adimat_pop1;
   for k=fliplr(1 : tmpfra1_2)
      lse = adimat_pop_index1(lse, k);
      a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_lse(k))));
      a_lse = a_zeros_index1(a_lse, lse, k);
      tmplia1 = adimat_pop1;
      a_alphas(k) = adimat_adjsum(a_alphas(k), adimat_adjred(alphas(k), a_tmplia1));
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_tmplia1));
      a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, -a_tmplia1));
      a_tmplia1 = a_zeros1(tmplia1);
      tmpca1 = adimat_pop1;
      a_tmpca2 = adimat_adjsum(a_tmpca2, a_sum(a_tmpca1, tmpca2));
      a_tmpca1 = a_zeros1(tmpca1);
      tmpca2 = adimat_pop1;
      a_L0 = adimat_adjsum(a_L0, a_diag(a_tmpca2, L0));
      a_tmpca2 = a_zeros1(tmpca2);
      tmpca3 = adimat_pop1;
      a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjmultr(tmpca4, 0.5, a_tmpca3));
      a_tmpca3 = a_zeros1(tmpca3);
      tmpca4 = adimat_pop1;
      a_mahal = adimat_adjsum(a_mahal, a_ctranspose(adimat_adjmultl(mahal', a_tmpca4, mahal), mahal));
      a_mahal = adimat_adjsum(a_mahal, adimat_adjmultr(mahal, mahal', a_tmpca4));
      a_tmpca4 = a_zeros1(tmpca4);
      mahal = adimat_pop1;
      a_L = adimat_adjsum(a_L, adimat_adjmultl(L, a_mahal, tmpca1));
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultr(tmpca1, L, a_mahal));
      a_mahal = a_zeros1(mahal);
      tmpca1 = adimat_pop1;
      a_mus(:, k) = adimat_adjsum(a_mus(:, k), adimat_adjred(mus(:, k), a_tmpca1));
      a_tmpca1 = a_zeros1(tmpca1);
      L = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_L));
      a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjred(tmpca2, a_L));
      a_L = a_zeros1(L);
      tmpca1 = adimat_pop1;
      a_L0 = adimat_adjsum(a_L0, call(@tril, a_tmpca1, -1));
      a_tmpca1 = a_zeros1(tmpca1);
      tmpca2 = adimat_pop1;
      a_tmpca3 = adimat_adjsum(a_tmpca3, a_diag(a_tmpca2, tmpca3));
      a_tmpca2 = a_zeros1(tmpca2);
      tmpca3 = adimat_pop1;
      a_tmpca4 = adimat_adjsum(a_tmpca4, exp(tmpca4) .* a_tmpca3);
      a_tmpca3 = a_zeros1(tmpca3);
      tmpca4 = adimat_pop1;
      a_L0 = adimat_adjsum(a_L0, a_diag(a_tmpca4, L0));
      a_tmpca4 = a_zeros1(tmpca4);
      L0 = adimat_pop1;
      a_Ls(:, :, k) = adimat_adjsum(a_Ls(:, :, k), a_L0);
      a_L0 = a_zeros1(L0);
   end
end

function nll = rec_example_gmm_adi(alphas, mus, Ls, x)
   tmpca4 = 0;
   tmpca3 = 0;
   tmpca2 = 0;
   tmpca1 = 0;
   tmplia1 = 0;
   L0 = 0;
   L = 0;
   mahal = 0;
   K = length(alphas);
   lse = zeros(K, 1, 'like', alphas);
   tmpfra1_2 = K;
   for k=1 : tmpfra1_2
      adimat_push1(L0);
      L0 = Ls(:, :, k);
      adimat_push1(tmpca4);
      tmpca4 = diag(L0);
      adimat_push1(tmpca3);
      tmpca3 = exp(tmpca4);
      adimat_push1(tmpca2);
      tmpca2 = diag(tmpca3);
      adimat_push1(tmpca1);
      tmpca1 = tril(L0, -1);
      adimat_push1(L);
      L = tmpca1 + tmpca2;
      adimat_push1(tmpca1);
      tmpca1 = mus(:, k) - x;
      adimat_push1(mahal);
      mahal = L * tmpca1;
      adimat_push1(tmpca4);
      tmpca4 = mahal' * mahal;
      adimat_push1(tmpca3);
      tmpca3 = 0.5 * tmpca4;
      adimat_push1(tmpca2);
      tmpca2 = diag(L0);
      adimat_push1(tmpca1);
      tmpca1 = sum(tmpca2);
      adimat_push1(tmplia1);
      tmplia1 = alphas(k) + tmpca1 - tmpca3;
      adimat_push_index1(lse, k);
      lse(k) = tmplia1;
   end
   adimat_push1(tmpfra1_2);
   tmpca6 = exp(alphas);
   tmpca5 = sum(tmpca6);
   adimat_push1(tmpca4);
   tmpca4 = log(tmpca5);
   adimat_push1(tmpca3);
   tmpca3 = exp(lse);
   adimat_push1(tmpca2);
   tmpca2 = sum(tmpca3);
   adimat_push1(tmpca1);
   tmpca1 = log(tmpca2);
   nll = tmpca1 - tmpca4;
   adimat_push(L0, L, mahal, K, lse, tmpca4, tmpca3, tmpca2, tmpca1, tmplia1, tmpca6, tmpca5, nll, alphas, mus, Ls);
   if nargin > 3
      adimat_push1(x);
   end
   adimat_push1(nargin);
end

function [a_alphas a_mus a_Ls] = ret_example_gmm_adi(a_nll)
   tmpnargin = adimat_pop1;
   if tmpnargin > 3
      x = adimat_pop1;
   end
   [Ls mus alphas nll tmpca5 tmpca6 tmplia1 tmpca1 tmpca2 tmpca3 tmpca4 lse K mahal L L0] = adimat_pop;
   [a_L0 a_L a_mahal a_lse a_tmpca4 a_tmpca3 a_tmpca2 a_tmpca1 a_tmplia1 a_tmpca6 a_tmpca5 a_alphas a_mus a_Ls] = a_zeros(L0, L, mahal, lse, tmpca4, tmpca3, tmpca2, tmpca1, tmplia1, tmpca6, tmpca5, alphas, mus, Ls);
   if nargin < 1
      a_nll = a_zeros1(nll);
   end
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_nll));
   a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjred(tmpca4, -a_nll));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, a_tmpca1 ./ tmpca2);
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, a_sum(a_tmpca2, tmpca3));
   a_tmpca2 = a_zeros1(tmpca2);
   tmpca3 = adimat_pop1;
   a_lse = adimat_adjsum(a_lse, exp(lse) .* a_tmpca3);
   a_tmpca3 = a_zeros1(tmpca3);
   tmpca4 = adimat_pop1;
   a_tmpca5 = adimat_adjsum(a_tmpca5, a_tmpca4 ./ tmpca5);
   a_tmpca4 = a_zeros1(tmpca4);
   a_tmpca6 = adimat_adjsum(a_tmpca6, a_sum(a_tmpca5, tmpca6));
   a_alphas = adimat_adjsum(a_alphas, exp(alphas) .* a_tmpca6);
   tmpfra1_2 = adimat_pop1;
   for k=fliplr(1 : tmpfra1_2)
      lse = adimat_pop_index1(lse, k);
      a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_lse(k))));
      a_lse = a_zeros_index1(a_lse, lse, k);
      tmplia1 = adimat_pop1;
      a_alphas(k) = adimat_adjsum(a_alphas(k), adimat_adjred(alphas(k), a_tmplia1));
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_tmplia1));
      a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, -a_tmplia1));
      a_tmplia1 = a_zeros1(tmplia1);
      tmpca1 = adimat_pop1;
      a_tmpca2 = adimat_adjsum(a_tmpca2, a_sum(a_tmpca1, tmpca2));
      a_tmpca1 = a_zeros1(tmpca1);
      tmpca2 = adimat_pop1;
      a_L0 = adimat_adjsum(a_L0, a_diag(a_tmpca2, L0));
      a_tmpca2 = a_zeros1(tmpca2);
      tmpca3 = adimat_pop1;
      a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjmultr(tmpca4, 0.5, a_tmpca3));
      a_tmpca3 = a_zeros1(tmpca3);
      tmpca4 = adimat_pop1;
      a_mahal = adimat_adjsum(a_mahal, a_ctranspose(adimat_adjmultl(mahal', a_tmpca4, mahal), mahal));
      a_mahal = adimat_adjsum(a_mahal, adimat_adjmultr(mahal, mahal', a_tmpca4));
      a_tmpca4 = a_zeros1(tmpca4);
      mahal = adimat_pop1;
      a_L = adimat_adjsum(a_L, adimat_adjmultl(L, a_mahal, tmpca1));
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultr(tmpca1, L, a_mahal));
      a_mahal = a_zeros1(mahal);
      tmpca1 = adimat_pop1;
      a_mus(:, k) = adimat_adjsum(a_mus(:, k), adimat_adjred(mus(:, k), a_tmpca1));
      a_tmpca1 = a_zeros1(tmpca1);
      L = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_L));
      a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjred(tmpca2, a_L));
      a_L = a_zeros1(L);
      tmpca1 = adimat_pop1;
      a_L0 = adimat_adjsum(a_L0, call(@tril, a_tmpca1, -1));
      a_tmpca1 = a_zeros1(tmpca1);
      tmpca2 = adimat_pop1;
      a_tmpca3 = adimat_adjsum(a_tmpca3, a_diag(a_tmpca2, tmpca3));
      a_tmpca2 = a_zeros1(tmpca2);
      tmpca3 = adimat_pop1;
      a_tmpca4 = adimat_adjsum(a_tmpca4, exp(tmpca4) .* a_tmpca3);
      a_tmpca3 = a_zeros1(tmpca3);
      tmpca4 = adimat_pop1;
      a_L0 = adimat_adjsum(a_L0, a_diag(a_tmpca4, L0));
      a_tmpca4 = a_zeros1(tmpca4);
      L0 = adimat_pop1;
      a_Ls(:, :, k) = adimat_adjsum(a_Ls(:, :, k), a_L0);
      a_L0 = a_zeros1(L0);
   end
end
